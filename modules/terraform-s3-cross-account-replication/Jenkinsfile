pipeline {
    agent any
    parameters {
        string(name: 'WORKSPACE', defaultValue: 'development', description:'setting up workspace for terraform')
    }
    options {
        ansiColor('xterm')
    }
    environment {
        TP_LOG = "WARN"
        PATH = "$TF_HOME:$PATH"
        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }
    stages {
            stage('modules/TerraformInit'){
            steps {
                dir('terraform-s3-cross-account-replication'){
                    sh "terraform init -input=false"
                    sh "echo \$PWD"
                    sh "whoami"
                }
            }
        }

        // stage('TerraformFormat'){
        //     steps {
        //         dir('terraform-s3-cross-account-replication'){
        //             sh "terraform fmt -list=true -write=false -diff=true -check=true"
        //         }
        //     }
        // }

        // stage('TerraformValidate'){
        //     steps {
        //         dir('terraform-s3-cross-account-replication'){
        //             sh "terraform validate"
        //         }
        //     }
        // }

        stage('TerraformPlan'){
            steps {
                dir('modules/terraform-s3-cross-account-replication/'){
                    script {
                        try {
                            sh "terraform workspace new ${params.WORKSPACE}"
                        } catch (err) {
                            sh "terraform workspace select ${params.WORKSPACE}"
                        }
                        sh "terraform plan \
                        -out terraform.tfplan;echo \$? > status"
                        stash name: "terraform-plan", includes: "terraform.tfplan"
                    }
                }
            }
        }
        
        stage('TerraformApply'){
            steps {
                script{
                    def apply = false
                    try {
                        input message: 'Can you please confirm the apply', ok: 'Ready to Apply the Config'
                        apply = true
                    } catch (err) {
                        apply = false
                         currentBuild.result = 'UNSTABLE'
                    }
                    if(apply){
                        dir('modules/terraform-s3-cross-account-replication/'){
                            unstash "terraform-plan"
                            sh 'terraform apply terraform.tfplan' 
                        }
                    }
                }
            }
        }
    }
}